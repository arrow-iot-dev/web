{"version":3,"sources":["components/Home.js","components/Logs.js","components/Setting.js","hooks/useBle.js","App.js","reportWebVitals.js","index.js"],"names":["Home","distance","time","state","timer","useMemo","style","styles","container","distanceWrap","label","toFixed","unit","display","flexDirection","flex","padding","title","fontSize","alignItems","justifyContent","marginTop","marginBottom","FlatList","data","keyExtractor","renderItem","map","item","index","key","Logs","clearLogs","names","setNames","selectedName","onChangeName","setSelectedName","setLogs","useState","value","setValue","dayjs","format","date","setDate","list","filter","name","dateTime","isSame","type","onChange","e","target","onClick","undefined","find","newValue","localStorage","setItem","JSON","stringify","alert","nameRow","activeTag","tag","cursor","window","confirm","prevLogs","newLogs","prevLog","n","filteredList","text","log","toLocaleString","join","content","encodedUri","encodeURI","open","listItem","th","number","toString","sTime","paddingBottom","paddingTop","fontWeight","divAlign","border","backgroundColor","width","gap","flexWrap","Setting","alarmTime","setAlarmTime","onSaveAlarmTime","input","newTime","button","margin","textAlign","serviceUUID","useBle","isConnected","setIsConnected","setDistance","setTime","logs","setState","bleCharacteristic","setBleCharacteristic","bleAbortControllerCharacteristic","setBleAbortControllerCharacteristic","useEffect","savedLogs","getItem","oldLogs","parse","savedNames","oldNames","useCallback","removeItem","scanAndConnect","navigator","bluetooth","requestDevice","filters","optionalServices","then","device","console","addEventListener","event","once","gatt","connect","server","connected","getPrimaryService","service","getCharacteristic","characteristic","catch","error","location","reload","startNotifications","abortController","AbortController","TextDecoder","decode","split","distanceInch","timeN","stateN","Date","signal","abort","aTime","encoder","TextEncoder","writeValue","encode","App","tabKey","setTabKey","tabs","home","component","props","setting","Comp","status","scanningdiv","tab","borderRightWidth","borderRightColor","activeLabel","inactiveLabel","minHeight","height","position","letf","right","bottom","borderTop","color","scanningText","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a2164a2.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\n\nconst Home = ({ distance = 0, time = 0, state = 0 }) => {\n\tconst timer = useMemo(() => {\n\t\tconst sTime = time / 1000\n\t\t// const s = (sTime % 60).toString().padStart(2, '0')\n\t\t// const m = Math.floor(sTime / 60).toString().padStart(2, '0')\n\t\t// return `${m}:${s}`\n\t\treturn `${sTime}`\n\t}, [time])\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={styles.distanceWrap}>\n\t\t\t\t<div style={styles.label}>Distance</div>\n\t\t\t\t<div style={styles.distance}>{(distance || 0).toFixed(2)}</div>\n\t\t\t\t<div style={styles.unit}>Inches</div>\n\t\t\t\t{\n\t\t\t\t\tstate > 0 && (\n\t\t\t\t\t\t<div style={styles.timer}>Timer: {timer}s</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Home\n\nconst styles = {\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tdistanceWrap: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tlabel: {\n\t\tfontSize: 30,\n\t},\n\tdistance: {\n\t\tfontSize: 100\n\t},\n\tunit: {\n\t\tfontSize: 30,\n\t},\n\ttimer: {\n\t\tmarginTop: 30,\n\t\tfontSize: 35,\n\t\tmarginBottom: 30,\n\t}\n};\n","import React, { useState } from 'react'\nimport dayjs from 'dayjs'\n\nconst FlatList = ({ data, keyExtractor, renderItem}) => {\n\treturn (\n\t\t<div>\n\t\t\t{data.map((item, index) => {\n\t\t\t\tconst key = keyExtractor(item, index)\n\t\t\t\treturn (\n\t\t\t\t\t<div key={key}>\n\t\t\t\t\t\t{renderItem({ item, index })}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nconst Logs = ({ data = [], clearLogs, names, setNames, selectedName, setSelectedName, onChangeName, setLogs }) => {\n\tconst [value, setValue] = useState('')\n\tconst [date, setDate] = useState(dayjs().format('YYYY-MM-DD'))\n\n\tconst list = data.filter((item) => item.name === selectedName && dayjs(item.dateTime).isSame(date, 'date'))\n\n\tconst onClear = () => {\n\t\tconst answer = window.confirm('Are you sure to clear all logs?')\n\t\tif (answer) {\n\t\t\tclearLogs()\n\t\t}\n\t}\n\tconst onExport = () => {\n\t\tconst filteredList = data.filter((item) => dayjs(item.dateTime).isSame(date, 'date'))\n\t\tconst columns = 'No.,Distance(in.),Time(sec.),Name,Date Time'\n\t\tconst text = [columns, ...filteredList.map((log, index) => `${index + 1},${(log.distance || 0).toFixed(2)},${log.time / 1000},${log.name},${log.dateTime.toLocaleString('en-UK')}`)].join('\\n')\n\t\tconst content = `data:text/csv;charset=utf-8,${text}`\n\t\tconst encodedUri = encodeURI(content)\n\t\twindow.open(encodedUri)\n\t}\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={{ marginBottom: 10}}>\n\t\t\t\t<input type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} />\n\t\t\t</div>\n\t\t\t<div style={{ marginBottom: 10}}>\n\t\t\t\t<input value={value} onChange={(e) => setValue(e.target.value)} />\n\t\t\t\t<button onClick={() => {\n                                        if (!(value === '')) {\n                                          if ((names.find(name => name === value)) === undefined) {\n                                            setNames(names => {\n                                                    const newValue = [...names, value]\n                                                    localStorage.setItem('names', JSON.stringify(newValue))\n                                                    return newValue\n                                            })\n                                            setValue('')\n                                          } else {\n                                            alert('User \\'' + value + '\\' already exists.')\n                                          }\n                                        }\n\t\t\t\t}}>+ Add</button>\n\t\t\t</div>\n\t\t\t<div style={styles.nameRow}>\n\t\t\t\t{names.map((name) =>\n\t\t\t\t\t<div style={name === selectedName ? styles.activeTag : styles.tag}>\n\t\t\t\t\t\t<span onClick={() => onChangeName(name)}>{name}</span>\n\t\t\t\t\t\t<span style={{ cursor: 'pointer'}} onClick={() => {\n                                                        if (!(name === 'Default')) {\n                                                          const confirmation = window.confirm('Are you sure to delete user \\'' + name + '\\' ?')\n\n                                                          if (confirmation) {\n                                                            setLogs(prevLogs => {\n                                                                    const newLogs = prevLogs.filter(prevLog => prevLog.name !== name)\n                                                                    localStorage.setItem('logs', JSON.stringify(newLogs))\n                                                                    return newLogs\n                                                            });\n                                                            setNames(names => {\n                                                                    const newValue = names.filter(n => n !== name)\n                                                                    localStorage.setItem('names', JSON.stringify(newValue))\n                                                                    return newValue\n                                                            });\n\n                                                            if (name === selectedName) {\n                                                              onChangeName('Default')\n                                                            }\n                                                          }\n                                                        } else {\n                                                          alert('User \\'' + name + '\\' can not be deleted.')\n                                                        }\n\t\t\t\t\t\t}}>X</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div style={{ display: 'flex', justifyContent: 'space-between' }}>\n\t\t\t\t<button onClick={onClear}>Clear</button>\n\t\t\t\t<button onClick={onExport}>Export</button>\n\t\t\t</div>\n\t\t\t<div style={styles.listItem}>\n\t\t\t\t<div style={{...styles.th, ...styles.number}}>No.</div>\n\t\t\t\t<div style={{...styles.th, ...styles.distance}}>Distance (in.)</div>\n\t\t\t\t<div style={{...styles.th, ...styles.time}}>Time (sec.)</div>\n\t\t\t</div>\n\t\t\t<FlatList\n\t\t\t\tdata={list}\n\t\t\t\tkeyExtractor={(item, index) => index.toString()}\n\t\t\t\trenderItem={({ item, index }) => {\n\t\t\t\t\tconst sTime = item.time / 1000\n\t\t\t\t\t// const s = (sTime % 60).toString().padStart(2, '0')\n\t\t\t\t\t// const m = Math.floor(sTime / 60).toString().padStart(2, '0')\n\t\t\t\t\t// const timer = `${m}:${s}`\n\t\t\t\t\tconst timer = `${sTime}`\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div style={styles.listItem}>\n\t\t\t\t\t\t\t<div style={styles.number}>#{index + 1}</div>\n\t\t\t\t\t\t\t<div style={styles.distance}>{(item.distance || 0).toFixed(2)}</div>\n\t\t\t\t\t\t\t<div style={styles.time}>{timer}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Logs\n\nconst styles = {\n\tcontainer: {\n\t\tflex: 1,\n\t\tpadding: 15,\n    paddingBottom: 100,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tlistItem: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tpaddingTop: 5,\n\t\tpaddingBottom: 5,\n\t},\n\tth: {\n\t\tfontWeight: 'bold'\n\t},\n\tnumber: {\n\t\tflex: 1,\n\t\tfontSize: 20,\n\t},\n\tdistance: {\n\t\tflex: 3,\n\t\tdivAlign: 'right',\n\t\tfontSize: 20,\n\t},\n\ttime: {\n\t\tflex: 3,\n\t\tdivAlign: 'right',\n\t\tfontSize: 20,\n\t},\n\ttag: {\n\t\tborder: '1px solid #d0d0d0',\n\t\tbackgroundColor: '#fff',\n\t\tpadding: 5,\n\t\twidth: 'fit-content',\n\t\tdisplay: 'flex',\n\t\tgap: 3,\n\t},\n\tactiveTag: {\n\t\tborder: '3px solid lime',\n\t\tbackgroundColor: '#d0d0d0',\n\t\tpadding: 5,\n\t\twidth: 'fit-content',\n\t\tdisplay: 'flex',\n\t\tgap: 3,\n\t},\n\tnameRow: {\n\t\tdisplay: 'flex',\n\t\tgap: 5,\n                flexWrap: 'wrap',\n\t}\n}\n","import React, { useMemo } from 'react'\n\nconst Setting = ({ alarmTime, setAlarmTime, onSaveAlarmTime }) => {\n  const time = useMemo(() => {\n    return alarmTime / 1000\n  }, [alarmTime])\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={styles.distanceWrap}>\n        <div style={styles.label}>Set Alarm Time (sec)</div>\n        <input type=\"number\" style={styles.input} value={time} onChange={(e) => {\n          const newTime = +e.target.value * 1000\n          setAlarmTime(newTime)\n        }} />\n        <button style={styles.button} onClick={onSaveAlarmTime}>Save</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Setting\n\nconst styles = {\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tdistanceWrap: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n  input: {\n    fontSize: 30,\n    padding: 10,\n    margin: 20,\n    textAlign: 'center',\n    width: 100,\n  },\n\tlabel: {\n\t\tfontSize: 30,\n\t},\n  button: {\n    fontSize: 20,\n  },\n\tdistance: {\n\t\tfontSize: 100\n\t},\n\tunit: {\n\t\tfontSize: 30,\n\t},\n\ttimer: {\n\t\tmarginTop: 30,\n\t\tfontSize: 35,\n\t\tmarginBottom: 30,\n\t}\n};\n","import { useEffect, useState, useCallback } from 'react'\n\nconst serviceUUID = '52cf0b2c-28f2-4328-aaac-6badc36777d4'\nconst characteristicUUID = '051f540c-9a37-4284-9f98-2073e9f5bdfe'\n// const characteristicUUID2 = 'ec14304a-1796-4e20-b170-7f24492a5aca'\nconst bleName = 'Arrow_ESP32'\n\n// const maxThreshold =  70 / 2.54 // 70 cm\n// const minThreshold =  50 / 2.54 // 50 cm\n\n// const cmToInch = (cm) => {\n//   return cm / 2.54\n// }\n\n// const mockLogs = [{\n//   distance: 100.0,\n//   time: 4000,\n//   dateTime: new Date(),\n//   name: 'Ping'\n// }, {\n//   distance: 100.0,\n//   time: 4000,\n//   dateTime: new Date(),\n//   name: 'Joe',\n// }, {\n//   distance: 120.0,\n//   time: 4100,\n//   dateTime: new Date(),\n//   name: 'Jame',\n// }]\n\nconst useBle = () => {\n  // const interval = useRef(null)\n  // const [isScanning, setIsScanning] = useState(true)\n  const [isConnected, setIsConnected] = useState(false)\n  const [distance, setDistance] = useState(0)\n  // const [maxDistance, setMaxDistance] = useState(0)\n  const [time, setTime] = useState(0)\n  // const [isReset, setIsReset] = useState(false)\n  const [logs, setLogs] = useState([])\n  // const [isStarting, setIsStarting] = useState(false)\n  const [state, setState] = useState(0)\n  const [alarmTime, setAlarmTime] = useState(0)\n  const [names, setNames] = useState([])\n  const [selectedName, setSelectedName] = useState()\n  //const [bleDevice, setBleDevice] = useState(null)\n  const [bleCharacteristic, setBleCharacteristic] = useState(null)\n  const [bleAbortControllerCharacteristic, setBleAbortControllerCharacteristic] = useState(null)\n\n  useEffect(() => {\n    const savedLogs = localStorage.getItem('logs')\n    const oldLogs = savedLogs ? JSON.parse(savedLogs) : []\n    setLogs(oldLogs)\n    // setLogs(mockLogs)\n\n    const savedNames = localStorage.getItem('names')\n    const oldNames = savedNames ? JSON.parse(savedNames) : ['Default']\n    setNames(oldNames)\n    setSelectedName(oldNames?.[0])\n  }, [])\n\n  // const setToggleTimer = useCallback(() => {\n  //   setIsStarting(starting => {\n  //     if (starting) {\n  //       setLogs((prevLogs) => {\n  //         const newLogs = [...prevLogs, {\n  //           distance: maxDistance,\n  //           time,\n  //         }]\n  //         localStorage.setItem('logs', JSON.stringify(newLogs))\n  //         return newLogs\n  //       })\n  //       setIsReset(false)\n  //       setMaxDistance(0)\n  //       setTime(0)\n  //     } else {\n  //       setIsReset(true)\n  //     }\n  //     return !starting\n  //   })\n  // }, [maxDistance, time])\n\n  const clearLogs = useCallback(() => {\n    setLogs([])\n    localStorage.removeItem('logs')\n  }, [])\n\n  // const reset = useCallback(() => {\n  //   setLogs((prevLogs) => {\n  //     const newLogs = [...prevLogs, {\n  //       distance: maxDistance,\n  //       time,\n  //     }]\n  //     localStorage.setItem('logs', JSON.stringify(newLogs))\n  //     return newLogs\n  //   })\n  //   setIsReset(false)\n  //   setIsReset(true)\n  //   setMaxDistance(0)\n  //   setTime(0)\n  // }, [time, maxDistance])\n\n  const scanAndConnect = useCallback(() => {\n    if (!isConnected) {\n      navigator.bluetooth.requestDevice({\n        filters: [{\n          name: bleName\n        }],\n        optionalServices: [serviceUUID]\n      })\n      .then(device => {\n        console.log({ device })\n        //setBleDevice(device)\n        device.addEventListener('gattserverdisconnected', (event) => {\n          const device = event.target;\n          setIsConnected(false)\n          setBleCharacteristic(null)\n          alert('Device disconnected.')\n          console.log(`Device ${device.name} is disconnected.`)\n        }, {once: true})\n        return device.gatt.connect();\n      })\n      .then((server) => {\n        console.log({ server })\n        setIsConnected(server.connected)\n        return server.getPrimaryService(serviceUUID)\n      })\n      .then((service) => {\n        console.log({ service })\n        return service.getCharacteristic(characteristicUUID)\n      })\n      .then((characteristic) => {\n        console.log({ characteristic })\n        setBleCharacteristic(characteristic)\n      //  return characteristic.startNotifications()\n      //})\n      //.then(characteristic => {\n      //  // coupling with addEventListener in useEffect of selectedName\n\n      //  const abortController = new AbortController();\n\n      //  setBleAbortController(abortController);\n\n      //  characteristic.addEventListener('characteristicvaluechanged', (event) => {\n      //    const value = event.target.value\n      //    const decoder = new TextDecoder('utf-8')\n      //    /*\n      //      state 0 = show distance only\n      //      state 1 = show distance & time\n      //      state 2 = show latest distance & time\n\n      //      time => ms\n      //      distance => inch\n      //    */\n      //    const [state, distance, time] = decoder.decode(value).split(',')\n      //    const distanceInch = +distance\n      //    const timeN = +time\n      //    const stateN = +state\n      //    setDistance(distanceInch)\n      //    setTime(timeN)\n      //    setState(stateN)\n      //    if (stateN === 2) {\n      //      setLogs((prevLogs) => {\n      //        const newLogs = [...prevLogs, {\n      //          distance: distanceInch,\n      //          time: timeN,\n      //          dateTime: new Date(),\n      //          name: selectedName,\n      //        }]\n      //        localStorage.setItem('logs', JSON.stringify(newLogs))\n      //        return newLogs\n      //      })\n      //    }\n      //    // if (isReset === 'true') {\n      //    //   alert('reset')\n      //    //   reset()\n      //    // }\n      //  }, {signal: abortController.signal});\n      //  console.log('Notifications have been started.');\n      })\n      .catch(error => { console.error(error); window.location.reload(); });\n    } else {\n      alert('Already connected.');\n    }\n    //}, [selectedName])\n  }, [isConnected])\n\n  //const onDisconnect = useCallback(() => {\n  //  if (!bleDevice) {\n  //    return\n  //  }\n  //  if (bleDevice.gatt.connected) {\n  //    bleDevice.gatt.disconnect()\n  //  } else {\n  //    console.log('Already disconnected')\n  //  }\n  //  setIsConnected(false)\n  //  setBleDevice(null)\n  //}, [bleDevice])\n\n  useEffect(() => {\n    if (selectedName) {\n      if (bleCharacteristic) {\n        bleCharacteristic.startNotifications()\n        .then(characteristic => {\n          // coupling with addEventListener in scanAndConnect\n\n          const abortController = new AbortController();\n\n          setBleAbortControllerCharacteristic(abortController);\n\n          characteristic.addEventListener('characteristicvaluechanged', (event) => {\n            const value = event.target.value\n            const decoder = new TextDecoder('utf-8')\n            /*\n              state 0 = show distance only\n              state 1 = show distance & time\n              state 2 = show latest distance & time\n\n              time => ms\n              distance => inch\n            */\n            const [state, distance, time] = decoder.decode(value).split(',')\n            const distanceInch = +distance\n            const timeN = +time\n            const stateN = +state\n            setDistance(distanceInch)\n            setTime(timeN)\n            setState(stateN)\n            if (stateN === 2) {\n              setLogs((prevLogs) => {\n                const newLogs = [...prevLogs, {\n                  distance: distanceInch,\n                  time: timeN,\n                  dateTime: new Date(),\n                  name: selectedName,\n                }]\n                localStorage.setItem('logs', JSON.stringify(newLogs))\n                return newLogs\n              })\n            }\n          }, {signal: abortController.signal});\n        });\n      }\n    }\n  }, [selectedName, bleCharacteristic])\n\n  // useEffect(() => {\n  //   if (isReset) {\n  //     interval.current =  setInterval(() => {\n  //       setTime(time => time + 1)\n  //     }, 1000)\n  //   }\n  //   return () => clearInterval(interval.current)\n  // }, [isReset])\n\n  // useEffect(() => {\n  //   setMaxDistance((prevMax) => {\n  //     // if (distance >= minThreshold && distance <= maxThreshold) {\n  //       if (distance > prevMax) {\n  //         return distance\n  //       }\n  //     // }\n  //     return prevMax\n  //   })\n  // }, [distance])\n\n  const onSaveAlarmTime = () => {\n    if(isConnected) {\n      if (alarmTime >= 0) {\n        const aTime = alarmTime.toString();\n        const encoder = new TextEncoder('utf-8')\n        bleCharacteristic.writeValue(encoder.encode(aTime));\n        alert('Saved !!!')\n      } else {\n        alert('Time is not valid !!!')\n      }\n    } else {\n      alert('Please connect to the device.')\n    }\n    //navigator.bluetooth.requestDevice({\n    //  filters: [{\n    //    name: bleName\n    //  }],\n    //  optionalServices: [serviceUUID]\n    //})\n    //.then(device => {\n    //  console.log({ device })\n    //  device.addEventListener('gattserverdisconnected', (event) => {\n    //    const device = event.target;\n    //    setIsConnected(false)\n    //    console.log(`Device ${device.name} is disconnected.`)\n    //  })\n    //  return device.gatt.connect();\n    //})\n    //.then((server) => {\n    //  console.log({ server })\n    //  setIsConnected(server.connected)\n    //  return server.getPrimaryService(serviceUUID)\n    //})\n    //.then((service) => {\n    //  console.log({ service })\n    //  return service.getCharacteristic(characteristicUUID)\n    //})\n    //.then(characteristic => {\n    //  if (alarmTime >= 0) {\n    //    const aTime = alarmTime.toString();\n    //    const encoder = new TextEncoder('utf-8')\n    //    // characteristic.writeValue(aTime);\n    //    characteristic.writeValue(encoder.encode(aTime));\n    //    alert('Saved !!!')\n    //  } else {\n    //    alert('Time is not valid !!!')\n    //  }\n    //})\n    //.catch(error => { console.error(error); });\n  }\n\n  const onChangeName = useCallback((name) => {\n    setSelectedName(name)\n    \n    if (bleAbortControllerCharacteristic) {\n      bleAbortControllerCharacteristic.abort()\n    }\n    \n    //onDisconnect()\n  //}, [onDisconnect])\n  }, [bleAbortControllerCharacteristic])\n\n  // return { distance, time, logs, isConnected, scanAndConnect, reset, clearLogs, setToggleTimer, isStarting, state }\n  return { distance, time, logs, isConnected, scanAndConnect, clearLogs, state, alarmTime, setAlarmTime, onSaveAlarmTime, names, selectedName, setNames, setSelectedName, onChangeName, setLogs }\n}\n\nexport default useBle\n","import { useState, useMemo } from 'react';\nimport './App.css';\nimport Home from './components/Home'\nimport Logs from './components/Logs'\nimport Setting from './components/Setting'\nimport useBle from './hooks/useBle'\n\n// const isScanning = false\n// const distance = 100\n// const time = 90\n// const data = [\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n// ]\n\nfunction App() {\n  // const { distance, time, logs: data, isConnected, scanAndConnect, clearLogs, isStarting, setToggleTimer } = useBle()\n  const { distance, time, logs: data, isConnected, scanAndConnect, clearLogs, state, alarmTime, setAlarmTime, onSaveAlarmTime, names, selectedName, setNames, setSelectedName, onChangeName, setLogs } = useBle()\n  const [tabKey, setTabKey] = useState('home') // home, logs, setting\n    const tabs = useMemo(() => ({\n      home: {\n        component: Home,\n        props: { distance, time, state },\n      },\n      logs: {\n        component: Logs,\n        props: { data, clearLogs, names, setNames, selectedName, setSelectedName, onChangeName, setLogs }\n      },\n      setting: {\n        component: Setting,\n        props: { alarmTime, setAlarmTime, onSaveAlarmTime }\n      }\n    }), [data, distance, time, clearLogs, state, alarmTime, setAlarmTime, onSaveAlarmTime, names, setNames, selectedName, setSelectedName, onChangeName, setLogs])\n    const Comp = tabs[tabKey].component\n    const props = tabs[tabKey].props\n\n    return (\n      <div style={styles.container}>\n        <div style={styles.status}>\n          <div style={styles.scanningdiv}>{isConnected ? 'Connected' : 'Disconnected'}</div>\n          {/* <button style={styles.button} onClick={reset}>Reset</button> */}\n          <button style={styles.button} onClick={scanAndConnect}>Scan and Connect</button>\n        </div>\n        <div style={styles.content}>\n          <Comp {...props} />\n        </div>\n        <div style={styles.tabs}>\n          <div style={{...styles.tab, ...{ borderRightWidth: 1, borderRightColor: '#d0d0d0' }}} onClick={() => setTabKey('home')}>\n            <div style={tabKey === 'home' ? styles.activeLabel : styles.inactiveLabel}>Home</div>\n          </div>\n          <div style={styles.tab} onClick={() => setTabKey('logs')}>\n            <div style={tabKey === 'logs' ? styles.activeLabel : styles.inactiveLabel}>Logs</div>\n          </div>\n          <div style={styles.tab} onClick={() => setTabKey('setting')}>\n            <div style={tabKey === 'setting' ? styles.activeLabel : styles.inactiveLabel}>Setting</div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    minHeight: '100vh',\n  },\n  content: {\n    display: 'flex',\n    flex: 1,\n    // paddingTop: 50,\n    backgroundColor: '#F5F5DC',\n    height: '100%',\n  },\n  tabs: {\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'fixed',\n    letf: 0,\n    right: 0,\n    width: '100%',\n    bottom: 0,\n    borderTop: '1px solid #d0d0d0',\n  },\n  tab: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#f1f1f1',\n  },\n  activeLabel: {\n    display: 'flex',\n    color: 'green',\n    fontWeight: 'bold'\n  },\n  inactiveLabel: {\n    display: 'flex',\n    color: '#444444',\n  },\n  scanningText: {\n    display: 'flex',\n    fontSize: 30\n  },\n  status: {\n    backgroundColor: 'black',\n    color: 'white',\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: 20,\n  },\n  button: {\n\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}