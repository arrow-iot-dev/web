{"version":3,"sources":["components/Home.js","components/Logs.js","components/Setting.js","hooks/useBle.js","App.js","reportWebVitals.js","index.js"],"names":["Home","distance","time","state","timer","useMemo","style","styles","container","distanceWrap","label","toFixed","unit","display","flexDirection","flex","padding","title","fontSize","alignItems","justifyContent","marginTop","marginBottom","FlatList","data","keyExtractor","renderItem","map","item","index","key","Logs","clearLogs","names","setNames","selectedName","onChangeName","setSelectedName","setLogs","useState","value","setValue","dayjs","format","date","setDate","list","filter","name","dateTime","isSame","type","onChange","e","target","onClick","undefined","find","newValue","localStorage","setItem","JSON","stringify","alert","nameRow","activeTag","tag","cursor","window","confirm","prevLogs","newLogs","prevLog","n","filteredList","text","log","toLocaleDateString","toLocaleTimeString","join","content","encodedUri","encodeURI","open","listItem","th","number","point","toString","sTime","uuid","paddingBottom","paddingTop","fontWeight","divAlign","textAlign","width","border","backgroundColor","gap","flexWrap","Setting","alarmTime","setAlarmTime","onSaveAlarmTime","input","newTime","button","margin","serviceUUID","useBle","isConnected","setIsConnected","setDistance","setTime","logs","setState","_setSelectedName","bleCharacteristic","setBleCharacteristic","selectedNameRef","useRef","current","useEffect","savedLogs","getItem","oldLogs","parse","savedNames","oldNames","useCallback","removeItem","scanAndConnect","navigator","bluetooth","requestDevice","filters","optionalServices","then","device","console","addEventListener","event","once","gatt","connect","server","connected","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","TextDecoder","decode","split","distanceInch","timeN","stateN","Date","replace","c","crypto","getRandomValues","Uint8Array","catch","error","location","reload","aTime","encoder","TextEncoder","writeValue","encode","App","tabKey","setTabKey","tabs","home","component","props","setting","Comp","status","scanningdiv","tab","borderRightWidth","borderRightColor","activeLabel","inactiveLabel","minHeight","height","position","letf","right","bottom","borderTop","color","scanningText","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ea715d9.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\n\nconst Home = ({ distance = 0, time = 0, state = 0 }) => {\n\tconst timer = useMemo(() => {\n\t\tconst sTime = time / 1000\n\t\t// const s = (sTime % 60).toString().padStart(2, '0')\n\t\t// const m = Math.floor(sTime / 60).toString().padStart(2, '0')\n\t\t// return `${m}:${s}`\n\t\treturn `${sTime}`\n\t}, [time])\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={styles.distanceWrap}>\n\t\t\t\t<div style={styles.label}>Distance</div>\n\t\t\t\t<div style={styles.distance}>{(distance || 0).toFixed(2)}</div>\n\t\t\t\t<div style={styles.unit}>Inches</div>\n\t\t\t\t{\n\t\t\t\t\tstate > 0 && (\n\t\t\t\t\t\t<div style={styles.timer}>Timer: {timer}s</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Home\n\nconst styles = {\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tdistanceWrap: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tlabel: {\n\t\tfontSize: 30,\n\t},\n\tdistance: {\n\t\tfontSize: 100\n\t},\n\tunit: {\n\t\tfontSize: 30,\n\t},\n\ttimer: {\n\t\tmarginTop: 30,\n\t\tfontSize: 35,\n\t\tmarginBottom: 30,\n\t}\n};\n","import React, { useState } from 'react'\nimport dayjs from 'dayjs'\n\nconst FlatList = ({ data, keyExtractor, renderItem}) => {\n\treturn (\n\t\t<div>\n\t\t\t{data.map((item, index) => {\n\t\t\t\tconst key = keyExtractor(item, index)\n\t\t\t\treturn (\n\t\t\t\t\t<div key={key}>\n\t\t\t\t\t\t{renderItem({ item, index })}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nconst Logs = ({ data = [], clearLogs, names, setNames, selectedName, setSelectedName, onChangeName, setLogs }) => {\n\tconst [value, setValue] = useState('')\n\tconst [date, setDate] = useState(dayjs().format('YYYY-MM-DD'))\n\n\tconst list = data.filter((item) => item.name === selectedName && dayjs(item.dateTime).isSame(date, 'date'))\n\n\tconst onClear = () => {\n\t\tconst answer = window.confirm('Are you sure to clear all logs?')\n\t\tif (answer) {\n\t\t\tclearLogs()\n\t\t}\n\t}\n\tconst onExport = () => {\n\t\tconst filteredList = data.filter((item) => dayjs(item.dateTime).isSame(date, 'date'))\n\t\tconst columns = 'No.,Distance(in.),Time(sec.),Name,Date Time'\n\t\tconst text = [columns, ...filteredList.map((log, index) => `${index + 1},${(log.distance || 0).toFixed(2)},${log.time / 1000},${log.name},${log.dateTime.toLocaleDateString('en-GB')} ${log.dateTime.toLocaleTimeString('en-GB')}`)].join('\\n')\n\t\tconst content = `data:text/csv;charset=utf-8,${text}`\n\t\tconst encodedUri = encodeURI(content)\n\t\twindow.open(encodedUri)\n\t}\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={{ marginBottom: 10}}>\n\t\t\t\t<input type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} />\n\t\t\t</div>\n\t\t\t<div style={{ marginBottom: 10}}>\n\t\t\t\t<input value={value} onChange={(e) => setValue(e.target.value)} />\n\t\t\t\t<button onClick={() => {\n                                        if (!(value === '')) {\n                                          if ((names.find(name => name === value)) === undefined) {\n                                            setNames(names => {\n                                                    const newValue = [...names, value]\n                                                    localStorage.setItem('names', JSON.stringify(newValue))\n                                                    return newValue\n                                            })\n                                            setValue('')\n                                          } else {\n                                            alert('User \\'' + value + '\\' already exists.')\n                                          }\n                                        }\n\t\t\t\t}}>+ Add</button>\n\t\t\t</div>\n\t\t\t<div style={styles.nameRow}>\n\t\t\t\t{names.map((name) =>\n\t\t\t\t\t<div style={name === selectedName ? styles.activeTag : styles.tag}>\n\t\t\t\t\t\t<span onClick={() => onChangeName(name)}>{name}</span>\n\t\t\t\t\t\t<span style={{ cursor: 'pointer'}} onClick={() => {\n                                                        if (!(name === 'Default')) {\n                                                          const confirmation = window.confirm('Are you sure to delete user \\'' + name + '\\' ?')\n\n                                                          if (confirmation) {\n                                                            setLogs(prevLogs => {\n                                                                    const newLogs = prevLogs.filter(prevLog => prevLog.name !== name)\n                                                                    localStorage.setItem('logs', JSON.stringify(newLogs))\n                                                                    return newLogs\n                                                            });\n                                                            setNames(names => {\n                                                                    const newValue = names.filter(n => n !== name)\n                                                                    localStorage.setItem('names', JSON.stringify(newValue))\n                                                                    return newValue\n                                                            });\n\n                                                            if (name === selectedName) {\n                                                              onChangeName('Default')\n                                                            }\n                                                          }\n                                                        } else {\n                                                          alert('User \\'' + name + '\\' can not be deleted.')\n                                                        }\n\t\t\t\t\t\t}}>X</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div style={{ display: 'flex', justifyContent: 'space-between' }}>\n\t\t\t\t<button onClick={onClear}>Clear</button>\n\t\t\t\t<button onClick={onExport}>Export</button>\n\t\t\t</div>\n\t\t\t<div style={styles.listItem}>\n\t\t\t\t<div style={{...styles.th, ...styles.number}}>No.</div>\n\t\t\t\t<div style={{...styles.th, ...styles.distance}}>Distance (in.)</div>\n\t\t\t\t<div style={{...styles.th, ...styles.time}}>Time (sec.)</div>\n\t\t\t\t<div style={{...styles.th, ...styles.point}}>Point</div>\n\t\t\t</div>\n\t\t\t<FlatList\n\t\t\t\tdata={list}\n\t\t\t\tkeyExtractor={(item, index) => index.toString()}\n\t\t\t\trenderItem={({ item, index }) => {\n\t\t\t\t\tconst sTime = item.time / 1000\n\t\t\t\t\t// const s = (sTime % 60).toString().padStart(2, '0')\n\t\t\t\t\t// const m = Math.floor(sTime / 60).toString().padStart(2, '0')\n\t\t\t\t\t// const timer = `${m}:${s}`\n\t\t\t\t\tconst timer = `${sTime}`\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div style={styles.listItem}>\n\t\t\t\t\t\t\t<div style={styles.number}>#{index + 1}</div>\n\t\t\t\t\t\t\t<div style={styles.distance}>{(item.distance || 0).toFixed(2)}</div>\n\t\t\t\t\t\t\t<div style={styles.time}>{timer}</div>\n                                                        <input style={styles.point} value={item.point} onChange={(e) => {\n                                                          setLogs(prevLogs => {\n                                                            const newLogs = prevLogs.map(prevLog => {\n                                                              if (prevLog.uuid === item.uuid) {\n                                                                prevLog.point = e.target.value;\n                                                              }\n                                                              return prevLog\n                                                            })\n                                                            localStorage.setItem('logs', JSON.stringify(newLogs))\n                                                            return newLogs\n                                                          });\n                                                        }}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Logs\n\nconst styles = {\n\tcontainer: {\n\t\tflex: 1,\n\t\tpadding: 15,\n    paddingBottom: 100,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tlistItem: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tpaddingTop: 5,\n\t\tpaddingBottom: 5,\n\t},\n\tth: {\n\t\tfontWeight: 'bold'\n\t},\n\tnumber: {\n\t\tflex: 1,\n\t\tfontSize: 20,\n\t},\n\tdistance: {\n\t\tflex: 3,\n\t\tdivAlign: 'right',\n\t\tfontSize: 20,\n\t},\n\ttime: {\n\t\tflex: 3,\n\t\tdivAlign: 'right',\n\t\tfontSize: 20,\n\t},\n\tpoint: {\n\t        flex: 1,\n                divAlign: 'right',\n\t        fontSize: 20,\n                textAlign: 'center',\n                width: 1,\n\t},\n\ttag: {\n\t\tborder: '1px solid #d0d0d0',\n\t\tbackgroundColor: '#fff',\n\t\tpadding: 5,\n\t\twidth: 'fit-content',\n\t\tdisplay: 'flex',\n\t\tgap: 3,\n\t},\n\tactiveTag: {\n\t\tborder: '3px solid lime',\n\t\tbackgroundColor: '#d0d0d0',\n\t\tpadding: 5,\n\t\twidth: 'fit-content',\n\t\tdisplay: 'flex',\n\t\tgap: 3,\n\t},\n\tnameRow: {\n\t\tdisplay: 'flex',\n\t\tgap: 5,\n                flexWrap: 'wrap',\n\t}\n}\n","import React, { useMemo } from 'react'\n\nconst Setting = ({ alarmTime, setAlarmTime, onSaveAlarmTime }) => {\n  const time = useMemo(() => {\n    return alarmTime / 1000\n  }, [alarmTime])\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={styles.distanceWrap}>\n        <div style={styles.label}>Set Alarm Time (sec)</div>\n        <input type=\"number\" style={styles.input} value={time} onChange={(e) => {\n          const newTime = +e.target.value * 1000\n          setAlarmTime(newTime)\n        }} />\n        <button style={styles.button} onClick={onSaveAlarmTime}>Save</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Setting\n\nconst styles = {\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tdistanceWrap: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n  input: {\n    fontSize: 30,\n    padding: 10,\n    margin: 20,\n    textAlign: 'center',\n    width: 100,\n  },\n\tlabel: {\n\t\tfontSize: 30,\n\t},\n  button: {\n    fontSize: 20,\n  },\n\tdistance: {\n\t\tfontSize: 100\n\t},\n\tunit: {\n\t\tfontSize: 30,\n\t},\n\ttimer: {\n\t\tmarginTop: 30,\n\t\tfontSize: 35,\n\t\tmarginBottom: 30,\n\t}\n};\n","import { useEffect, useState, useCallback, useRef } from 'react'\n\nconst serviceUUID = '52cf0b2c-28f2-4328-aaac-6badc36777d4'\nconst characteristicUUID = '051f540c-9a37-4284-9f98-2073e9f5bdfe'\n// const characteristicUUID2 = 'ec14304a-1796-4e20-b170-7f24492a5aca'\nconst bleName = 'Arrow_ESP32'\n\n// const maxThreshold =  70 / 2.54 // 70 cm\n// const minThreshold =  50 / 2.54 // 50 cm\n\n// const cmToInch = (cm) => {\n//   return cm / 2.54\n// }\n\n// const mockLogs = [{\n//   distance: 100.0,\n//   time: 4000,\n//   dateTime: new Date(),\n//   name: 'Ping',\n//   point: '0',\n//   uuid: ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)),\n// }, {\n//   distance: 100.0,\n//   time: 4000,\n//   dateTime: new Date(),\n//   name: 'Joe',\n//   point: '10',\n//   uuid: ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)),\n// }, {\n//   distance: 120.0,\n//   time: 4100,\n//   dateTime: new Date(),\n//   name: 'Jame',\n//   point: 'x',\n//   uuid: ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)),\n// }]\n\nconst useBle = () => {\n  // const interval = useRef(null)\n  // const [isScanning, setIsScanning] = useState(true)\n  const [isConnected, setIsConnected] = useState(false)\n  const [distance, setDistance] = useState(0)\n  // const [maxDistance, setMaxDistance] = useState(0)\n  const [time, setTime] = useState(0)\n  // const [isReset, setIsReset] = useState(false)\n  const [logs, setLogs] = useState([])\n  // const [isStarting, setIsStarting] = useState(false)\n  const [state, setState] = useState(0)\n  const [alarmTime, setAlarmTime] = useState(0)\n  const [names, setNames] = useState([])\n  const [selectedName, _setSelectedName] = useState()\n  //const [bleDevice, setBleDevice] = useState(null)\n  const [bleCharacteristic, setBleCharacteristic] = useState(null)\n  //const [bleAbortControllerCharacteristic, setBleAbortControllerCharacteristic] = useState(null)\n\n  const selectedNameRef = useRef(selectedName)\n  const setSelectedName = ((data) => {\n    selectedNameRef.current = data\n    _setSelectedName(data)\n  })\n\n  useEffect(() => {\n    const savedLogs = localStorage.getItem('logs')\n    const oldLogs = savedLogs ? JSON.parse(savedLogs) : []\n    setLogs(oldLogs)\n    // setLogs(mockLogs)\n\n    const savedNames = localStorage.getItem('names')\n    const oldNames = savedNames ? JSON.parse(savedNames) : ['Default']\n    setNames(oldNames)\n    setSelectedName(oldNames?.[0])\n  }, [])\n\n  // const setToggleTimer = useCallback(() => {\n  //   setIsStarting(starting => {\n  //     if (starting) {\n  //       setLogs((prevLogs) => {\n  //         const newLogs = [...prevLogs, {\n  //           distance: maxDistance,\n  //           time,\n  //         }]\n  //         localStorage.setItem('logs', JSON.stringify(newLogs))\n  //         return newLogs\n  //       })\n  //       setIsReset(false)\n  //       setMaxDistance(0)\n  //       setTime(0)\n  //     } else {\n  //       setIsReset(true)\n  //     }\n  //     return !starting\n  //   })\n  // }, [maxDistance, time])\n\n  const clearLogs = useCallback(() => {\n    setLogs([])\n    localStorage.removeItem('logs')\n  }, [])\n\n  // const reset = useCallback(() => {\n  //   setLogs((prevLogs) => {\n  //     const newLogs = [...prevLogs, {\n  //       distance: maxDistance,\n  //       time,\n  //     }]\n  //     localStorage.setItem('logs', JSON.stringify(newLogs))\n  //     return newLogs\n  //   })\n  //   setIsReset(false)\n  //   setIsReset(true)\n  //   setMaxDistance(0)\n  //   setTime(0)\n  // }, [time, maxDistance])\n\n  const scanAndConnect = useCallback(() => {\n    if (!isConnected) {\n      navigator.bluetooth.requestDevice({\n        filters: [{\n          name: bleName\n        }],\n        optionalServices: [serviceUUID]\n      })\n      .then(device => {\n        console.log({ device })\n        //setBleDevice(device)\n        device.addEventListener('gattserverdisconnected', (event) => {\n          const device = event.target;\n          setIsConnected(false)\n          setBleCharacteristic(null)\n          alert('Device disconnected.')\n          console.log(`Device ${device.name} is disconnected.`)\n        }, {once: true})\n        return device.gatt.connect();\n      })\n      .then((server) => {\n        console.log({ server })\n        setIsConnected(server.connected)\n        return server.getPrimaryService(serviceUUID)\n      })\n      .then((service) => {\n        console.log({ service })\n        return service.getCharacteristic(characteristicUUID)\n      })\n      .then((characteristic) => {\n        console.log({ characteristic })\n        setBleCharacteristic(characteristic)\n        return characteristic.startNotifications()\n      })\n      .then(characteristic => {\n        // coupling with addEventListener in useEffect of selectedName\n\n        //const abortController = new AbortController();\n\n        //setBleAbortController(abortController);\n\n        characteristic.addEventListener('characteristicvaluechanged', (event) => {\n          const value = event.target.value\n          const decoder = new TextDecoder('utf-8')\n          /*\n            state 0 = show distance only\n            state 1 = show distance & time\n            state 2 = show latest distance & time\n\n            time => ms\n            distance => inch\n          */\n          const [state, distance, time] = decoder.decode(value).split(',')\n          const distanceInch = +distance\n          const timeN = +time\n          const stateN = +state\n          setDistance(distanceInch)\n          setTime(timeN)\n          setState(stateN)\n          if (stateN === 2) {\n            setLogs((prevLogs) => {\n              const newLogs = [...prevLogs, {\n                distance: distanceInch,\n                time: timeN,\n                dateTime: new Date(),\n                //name: selectedName,\n                name: selectedNameRef.current,\n                point: '0',\n                uuid: ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)),\n              }]\n              localStorage.setItem('logs', JSON.stringify(newLogs))\n              return newLogs\n            })\n          }\n          // if (isReset === 'true') {\n          //   alert('reset')\n          //   reset()\n          // }\n        //}, {signal: abortController.signal});\n        });\n        console.log('Notifications have been started.');\n      })\n      .catch(error => { console.error(error); window.location.reload(); });\n    } else {\n      alert('Already connected.');\n    }\n    //}, [selectedName])\n  }, [isConnected])\n\n  //const onDisconnect = useCallback(() => {\n  //  if (!bleDevice) {\n  //    return\n  //  }\n  //  if (bleDevice.gatt.connected) {\n  //    bleDevice.gatt.disconnect()\n  //  } else {\n  //    console.log('Already disconnected')\n  //  }\n  //  setIsConnected(false)\n  //  setBleDevice(null)\n  //}, [bleDevice])\n\n  //useEffect(() => {\n  //  if (selectedName) {\n  //    if (bleCharacteristic) {\n  //      bleCharacteristic.startNotifications()\n  //      .then(characteristic => {\n  //        // coupling with addEventListener in scanAndConnect\n\n  //        const abortController = new AbortController();\n\n  //        setBleAbortControllerCharacteristic(abortController);\n\n  //        characteristic.addEventListener('characteristicvaluechanged', (event) => {\n  //          const value = event.target.value\n  //          const decoder = new TextDecoder('utf-8')\n  //          /*\n  //            state 0 = show distance only\n  //            state 1 = show distance & time\n  //            state 2 = show latest distance & time\n\n  //            time => ms\n  //            distance => inch\n  //          */\n  //          const [state, distance, time] = decoder.decode(value).split(',')\n  //          const distanceInch = +distance\n  //          const timeN = +time\n  //          const stateN = +state\n  //          setDistance(distanceInch)\n  //          setTime(timeN)\n  //          setState(stateN)\n  //          if (stateN === 2) {\n  //            setLogs((prevLogs) => {\n  //              const newLogs = [...prevLogs, {\n  //                distance: distanceInch,\n  //                time: timeN,\n  //                dateTime: new Date(),\n  //                name: selectedName,\n  //              }]\n  //              localStorage.setItem('logs', JSON.stringify(newLogs))\n  //              return newLogs\n  //            })\n  //          }\n  //        }, {signal: abortController.signal});\n  //      });\n  //    }\n  //  }\n  //}, [selectedName, bleCharacteristic])\n\n  // useEffect(() => {\n  //   if (isReset) {\n  //     interval.current =  setInterval(() => {\n  //       setTime(time => time + 1)\n  //     }, 1000)\n  //   }\n  //   return () => clearInterval(interval.current)\n  // }, [isReset])\n\n  // useEffect(() => {\n  //   setMaxDistance((prevMax) => {\n  //     // if (distance >= minThreshold && distance <= maxThreshold) {\n  //       if (distance > prevMax) {\n  //         return distance\n  //       }\n  //     // }\n  //     return prevMax\n  //   })\n  // }, [distance])\n\n  const onSaveAlarmTime = () => {\n    if(isConnected) {\n      if (alarmTime >= 0) {\n        const aTime = alarmTime.toString();\n        const encoder = new TextEncoder('utf-8')\n        bleCharacteristic.writeValue(encoder.encode(aTime));\n        alert('Saved !!!')\n      } else {\n        alert('Time is not valid !!!')\n      }\n    } else {\n      alert('Please connect to the device.')\n    }\n    //navigator.bluetooth.requestDevice({\n    //  filters: [{\n    //    name: bleName\n    //  }],\n    //  optionalServices: [serviceUUID]\n    //})\n    //.then(device => {\n    //  console.log({ device })\n    //  device.addEventListener('gattserverdisconnected', (event) => {\n    //    const device = event.target;\n    //    setIsConnected(false)\n    //    console.log(`Device ${device.name} is disconnected.`)\n    //  })\n    //  return device.gatt.connect();\n    //})\n    //.then((server) => {\n    //  console.log({ server })\n    //  setIsConnected(server.connected)\n    //  return server.getPrimaryService(serviceUUID)\n    //})\n    //.then((service) => {\n    //  console.log({ service })\n    //  return service.getCharacteristic(characteristicUUID)\n    //})\n    //.then(characteristic => {\n    //  if (alarmTime >= 0) {\n    //    const aTime = alarmTime.toString();\n    //    const encoder = new TextEncoder('utf-8')\n    //    // characteristic.writeValue(aTime);\n    //    characteristic.writeValue(encoder.encode(aTime));\n    //    alert('Saved !!!')\n    //  } else {\n    //    alert('Time is not valid !!!')\n    //  }\n    //})\n    //.catch(error => { console.error(error); });\n  }\n\n  const onChangeName = useCallback((name) => {\n    setSelectedName(name)\n    \n    //if (bleAbortControllerCharacteristic) {\n    //  bleAbortControllerCharacteristic.abort()\n    //}\n    \n    //onDisconnect()\n  //}, [onDisconnect])\n  //}, [bleAbortControllerCharacteristic])\n  }, [])\n\n  // return { distance, time, logs, isConnected, scanAndConnect, reset, clearLogs, setToggleTimer, isStarting, state }\n  return { distance, time, logs, isConnected, scanAndConnect, clearLogs, state, alarmTime, setAlarmTime, onSaveAlarmTime, names, selectedName, setNames, setSelectedName, onChangeName, setLogs }\n}\n\nexport default useBle\n","import { useState, useMemo } from 'react';\nimport './App.css';\nimport Home from './components/Home'\nimport Logs from './components/Logs'\nimport Setting from './components/Setting'\nimport useBle from './hooks/useBle'\n\n// const isScanning = false\n// const distance = 100\n// const time = 90\n// const data = [\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n// ]\n\nfunction App() {\n  // const { distance, time, logs: data, isConnected, scanAndConnect, clearLogs, isStarting, setToggleTimer } = useBle()\n  const { distance, time, logs: data, isConnected, scanAndConnect, clearLogs, state, alarmTime, setAlarmTime, onSaveAlarmTime, names, selectedName, setNames, setSelectedName, onChangeName, setLogs } = useBle()\n  const [tabKey, setTabKey] = useState('home') // home, logs, setting\n    const tabs = useMemo(() => ({\n      home: {\n        component: Home,\n        props: { distance, time, state },\n      },\n      logs: {\n        component: Logs,\n        props: { data, clearLogs, names, setNames, selectedName, setSelectedName, onChangeName, setLogs }\n      },\n      setting: {\n        component: Setting,\n        props: { alarmTime, setAlarmTime, onSaveAlarmTime }\n      }\n    }), [data, distance, time, clearLogs, state, alarmTime, setAlarmTime, onSaveAlarmTime, names, setNames, selectedName, setSelectedName, onChangeName, setLogs])\n    const Comp = tabs[tabKey].component\n    const props = tabs[tabKey].props\n\n    return (\n      <div style={styles.container}>\n        <div style={styles.status}>\n          <div style={styles.scanningdiv}>{isConnected ? 'Connected' : 'Disconnected'}</div>\n          {/* <button style={styles.button} onClick={reset}>Reset</button> */}\n          <button style={styles.button} onClick={scanAndConnect}>Scan and Connect</button>\n        </div>\n        <div style={styles.content}>\n          <Comp {...props} />\n        </div>\n        <div style={styles.tabs}>\n          <div style={{...styles.tab, ...{ borderRightWidth: 1, borderRightColor: '#d0d0d0' }}} onClick={() => setTabKey('home')}>\n            <div style={tabKey === 'home' ? styles.activeLabel : styles.inactiveLabel}>Home</div>\n          </div>\n          <div style={styles.tab} onClick={() => setTabKey('logs')}>\n            <div style={tabKey === 'logs' ? styles.activeLabel : styles.inactiveLabel}>Logs</div>\n          </div>\n          <div style={styles.tab} onClick={() => setTabKey('setting')}>\n            <div style={tabKey === 'setting' ? styles.activeLabel : styles.inactiveLabel}>Setting</div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    minHeight: '100vh',\n  },\n  content: {\n    display: 'flex',\n    flex: 1,\n    // paddingTop: 50,\n    backgroundColor: '#F5F5DC',\n    height: '100%',\n  },\n  tabs: {\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'fixed',\n    letf: 0,\n    right: 0,\n    width: '100%',\n    bottom: 0,\n    borderTop: '1px solid #d0d0d0',\n  },\n  tab: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#f1f1f1',\n  },\n  activeLabel: {\n    display: 'flex',\n    color: 'green',\n    fontWeight: 'bold'\n  },\n  inactiveLabel: {\n    display: 'flex',\n    color: '#444444',\n  },\n  scanningText: {\n    display: 'flex',\n    fontSize: 30\n  },\n  status: {\n    backgroundColor: 'black',\n    color: 'white',\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: 20,\n  },\n  button: {\n\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}