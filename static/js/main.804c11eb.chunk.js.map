{"version":3,"sources":["components/Home.js","components/Logs.js","hooks/useBle.js","App.js","reportWebVitals.js","index.js"],"names":["Home","distance","time","isStarting","setToggleTimer","timer","useMemo","s","toString","padStart","m","Math","floor","style","styles","container","distanceWrap","label","toFixed","unit","fontSize","backgroundColor","onClick","display","flexDirection","flex","padding","title","alignItems","justifyContent","marginTop","marginBottom","FlatList","data","keyExtractor","renderItem","map","item","index","key","Logs","clearLogs","window","confirm","listItem","th","number","paddingTop","paddingBottom","fontWeight","divAlign","serviceUUID","useBle","interval","useRef","useState","isConnected","setIsConnected","setDistance","maxDistance","setMaxDistance","setTime","isReset","setIsReset","logs","setLogs","setIsStarting","useEffect","savedLogs","localStorage","getItem","oldLogs","JSON","parse","useCallback","starting","prevLogs","newLogs","setItem","stringify","removeItem","reset","scanAndConnect","navigator","bluetooth","requestDevice","filters","name","optionalServices","then","device","console","log","addEventListener","event","target","gatt","connect","server","connected","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","value","TextDecoder","decode","split","distanceInch","alert","catch","error","current","setInterval","clearInterval","prevMax","App","tabKey","setTabKey","tabs","home","component","props","Comp","status","scanningdiv","button","content","tab","borderRightWidth","borderRightColor","activeLabel","inactiveLabel","height","position","letf","right","width","bottom","borderTop","color","scanningText","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.804c11eb.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\n\nconst Home = ({ distance = 0, time = 0, isStarting, setToggleTimer }) => {\n\tconst timer = useMemo(() => {\n\t\tconst s = (time % 60).toString().padStart(2, '0')\n\t\tconst m = Math.floor(time / 60).toString().padStart(2, '0')\n\t\treturn `${m}:${s}`\n\t}, [time])\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={styles.distanceWrap}>\n\t\t\t\t<div style={styles.label}>Distance</div>\n\t\t\t\t<div style={styles.distance}>{(distance || 0).toFixed(2)}</div>\n\t\t\t\t<div style={styles.unit}>Inches</div>\n\t\t\t\t<div style={styles.timer}>Timer: {timer}s</div>\n\t\t\t\t<button\n\t\t\t\t\tstyle={{ fontSize: 30, backgroundColor: isStarting ? '#DC143C' : '#7FFF00' }}\n\t\t\t\t\tonClick={setToggleTimer}\n\t\t\t\t>\n\t\t\t\t\t{isStarting ? 'Stop' : 'Start'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Home\n\nconst styles = {\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tdistanceWrap: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tlabel: {\n\t\tfontSize: 30,\n\t},\n\tdistance: {\n\t\tfontSize: 100\n\t},\n\tunit: {\n\t\tfontSize: 30,\n\t},\n\ttimer: {\n\t\tmarginTop: 30,\n\t\tfontSize: 35,\n\t\tmarginBottom: 30,\n\t}\n};\n","import React from 'react'\n\nconst FlatList = ({ data, keyExtractor, renderItem}) => {\n\treturn (\n\t\t<div>\n\t\t\t{data.map((item, index) => {\n\t\t\t\tconst key = keyExtractor(item, index)\n\t\t\t\treturn (\n\t\t\t\t\t<div key={key}>\n\t\t\t\t\t\t{renderItem({ item, index })}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nconst Logs = ({ data = [], clearLogs }) => {\n\tconst onClear = () => {\n\t\tconst answer = window.confirm('Are you sure to clear all logs')\n\t\tif (answer) {\n\t\t\tclearLogs()\n\t\t}\n\t}\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n\t\t\t\t<button onClick={onClear}>clear</button>\n\t\t\t</div>\n\t\t\t<div style={styles.listItem}>\n\t\t\t\t<div style={{...styles.th, ...styles.number}}>No.</div>\n\t\t\t\t<div style={{...styles.th, ...styles.distance}}>Distance (in.)</div>\n\t\t\t\t<div style={{...styles.th, ...styles.time}}>Time (mm:ss)</div>\n\t\t\t</div>\n\t\t\t<FlatList\n\t\t\t\tdata={data}\n\t\t\t\tkeyExtractor={(item, index) => index.toString()}\n\t\t\t\trenderItem={({ item, index }) => {\n\t\t\t\t\tconst s = (item.time % 60).toString().padStart(2, '0')\n\t\t\t\t\tconst m = Math.floor(item.time / 60).toString().padStart(2, '0')\n\t\t\t\t\tconst timer = `${m}:${s}`\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div style={styles.listItem}>\n\t\t\t\t\t\t\t<div style={styles.number}>#{index}</div>\n\t\t\t\t\t\t\t<div style={styles.distance}>{(item.distance || 0).toFixed(2)}</div>\n\t\t\t\t\t\t\t<div style={styles.time}>{timer}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Logs\n\nconst styles = {\n\tcontainer: {\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tlistItem: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tpaddingTop: 5,\n\t\tpaddingBottom: 5,\n\t},\n\tth: {\n\t\tfontWeight: 'bold'\n\t},\n\tnumber: {\n\t\tflex: 1,\n\t\tfontSize: 20,\n\t},\n\tdistance: {\n\t\tflex: 3,\n\t\tdivAlign: 'right',\n\t\tfontSize: 20,\n\t},\n\ttime: {\n\t\tflex: 3,\n\t\tdivAlign: 'right',\n\t\tfontSize: 20,\n\t},\n}\n","import { useEffect, useState, useCallback, useRef } from 'react'\n\nconst serviceUUID = '52cf0b2c-28f2-4328-aaac-6badc36777d4'\nconst characteristicUUID = '051f540c-9a37-4284-9f98-2073e9f5bdfe'\nconst bleName = 'Arrow_ESP32'\n\n// const maxThreshold =  70 / 2.54 // 70 cm\n// const minThreshold =  50 / 2.54 // 50 cm\n\nconst cmToInch = (cm) => {\n  return cm / 2.54\n}\n\nconst useBle = () => {\n  const interval = useRef(null)\n  // const [isScanning, setIsScanning] = useState(true)\n  const [isConnected, setIsConnected] = useState(false)\n  const [distance, setDistance] = useState(0)\n  const [maxDistance, setMaxDistance] = useState(0)\n  const [time, setTime] = useState(0)\n  const [isReset, setIsReset] = useState(false)\n  const [logs, setLogs] = useState([])\n  const [isStarting, setIsStarting] = useState(false)\n\n  useEffect(() => {\n    const savedLogs = localStorage.getItem('logs')\n    const oldLogs = savedLogs ? JSON.parse(savedLogs) : []\n    setLogs(oldLogs)\n  }, [])\n\n  const setToggleTimer = useCallback(() => {\n    setIsStarting(starting => {\n      if (starting) {\n        setLogs((prevLogs) => {\n          const newLogs = [...prevLogs, {\n            distance: maxDistance,\n            time,\n          }]\n          localStorage.setItem('logs', JSON.stringify(newLogs))\n          return newLogs\n        })\n        setIsReset(false)\n        setMaxDistance(0)\n        setTime(0)\n      } else {\n        setIsReset(true)\n      }\n      return !starting\n    })\n  }, [maxDistance, time])\n\n  const clearLogs = useCallback(() => {\n    setLogs([])\n    localStorage.removeItem('logs')\n  }, [])\n\n  const reset = useCallback(() => {\n    setLogs((prevLogs) => {\n      const newLogs = [...prevLogs, {\n        distance: maxDistance,\n        time,\n      }]\n      localStorage.setItem('logs', JSON.stringify(newLogs))\n      return newLogs\n    })\n    setIsReset(false)\n    setIsReset(true)\n    setMaxDistance(0)\n    setTime(0)\n  }, [time, maxDistance])\n\n  const scanAndConnect = useCallback(() => {\n    navigator.bluetooth.requestDevice({\n      filters: [{\n        name: bleName\n      }],\n      optionalServices: [serviceUUID]\n    })\n    .then(device => {\n      console.log({ device })\n      device.addEventListener('gattserverdisconnected', (event) => {\n        const device = event.target;\n        setIsConnected(false)\n        console.log(`Device ${device.name} is disconnected.`)\n      })\n      return device.gatt.connect();\n    })\n    .then((server) => {\n      console.log({ server })\n      setIsConnected(server.connected)\n      return server.getPrimaryService(serviceUUID)\n    })\n    .then((service) => {\n      console.log({ service })\n      return service.getCharacteristic(characteristicUUID)\n    })\n    .then((characteristic) => {\n      console.log({ characteristic })\n      return characteristic.startNotifications()\n    })\n    .then(characteristic => {\n      characteristic.addEventListener('characteristicvaluechanged', (event) => {\n        const value = event.target.value\n        const decoder = new TextDecoder('utf-8')\n        const [distance, isReset] = decoder.decode(value).split(',')\n        console.log({ distance, isReset })\n        const distanceInch = cmToInch(+distance)\n        setDistance(distanceInch)\n        if (isReset === 'true') {\n          alert('reset')\n          reset()\n        }\n      });\n      console.log('Notifications have been started.');\n    })\n    .catch(error => { console.error(error); });\n  }, [reset])\n\n  useEffect(() => {\n    if (isReset) {\n      interval.current =  setInterval(() => {\n        setTime(time => time + 1)\n      }, 1000)\n    }\n    return () => clearInterval(interval.current)\n  }, [isReset])\n\n  useEffect(() => {\n    setMaxDistance((prevMax) => {\n      // if (distance >= minThreshold && distance <= maxThreshold) {\n        if (distance > prevMax) {\n          return distance\n        }\n      // }\n      return prevMax\n    })\n  }, [distance])\n\n  return { distance, time, logs, isConnected, scanAndConnect, reset, clearLogs, setToggleTimer, isStarting }\n}\n\nexport default useBle\n","import { useState, useMemo } from 'react';\nimport './App.css';\nimport Home from './components/Home'\nimport Logs from './components/Logs'\nimport useBle from './hooks/useBle'\n\n// const isScanning = false\n// const distance = 100\n// const time = 90\n// const data = [\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n// ]\n\nfunction App() {\n  const { distance, time, logs: data, isConnected, scanAndConnect, clearLogs, isStarting, setToggleTimer } = useBle()\n  const [tabKey, setTabKey] = useState('home') // home, logs\n    const tabs = useMemo(() => ({\n      home: {\n        component: Home,\n        props: { distance, time, isStarting, setToggleTimer },\n      },\n      logs: {\n        component: Logs,\n        props: { data, clearLogs }\n      }\n    }), [data, distance, time, clearLogs, setToggleTimer, isStarting])\n    const Comp = tabs[tabKey].component\n    const props = tabs[tabKey].props\n\n    return (\n      <div style={styles.container}>\n        <div style={styles.status}>\n          <div style={styles.scanningdiv}>{isConnected ? 'Connected' : 'Disconnected'}</div>\n          {/* <button style={styles.button} onClick={reset}>Reset</button> */}\n          <button style={styles.button} onClick={scanAndConnect}>Scan and Connect</button>\n        </div>\n        <div style={styles.content}>\n          <Comp {...props} />\n        </div>\n        <div style={styles.tabs}>\n          <div style={{...styles.tab, ...{ borderRightWidth: 1, borderRightColor: '#d0d0d0' }}} onClick={() => setTabKey('home')}>\n            <div style={tabKey === 'home' ? styles.activeLabel : styles.inactiveLabel}>Home</div>\n          </div>\n          <div style={styles.tab} onClick={() => setTabKey('logs')}>\n            <div style={tabKey === 'logs' ? styles.activeLabel : styles.inactiveLabel}>Logs</div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    height: '100vh',\n  },\n  content: {\n    display: 'flex',\n    flex: 1,\n    paddingTop: 50,\n    backgroundColor: '#F5F5DC',\n    height: '100%',\n  },\n  tabs: {\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'absolute',\n    letf: 0,\n    right: 0,\n    width: '100%',\n    bottom: 0,\n    borderTop: '1px solid #d0d0d0',\n  },\n  tab: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#f1f1f1',\n  },\n  activeLabel: {\n    display: 'flex',\n    color: 'green',\n    fontWeight: 'bold'\n  },\n  inactiveLabel: {\n    display: 'flex',\n    color: '#444444',\n  },\n  scanningText: {\n    display: 'flex',\n    fontSize: 30\n  },\n  status: {\n    backgroundColor: 'black',\n    color: 'white',\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: 20,\n  },\n  button: {\n\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}