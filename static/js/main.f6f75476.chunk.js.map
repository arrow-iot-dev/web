{"version":3,"sources":["components/Home.js","components/Logs.js","components/Setting.js","hooks/useBle.js","App.js","reportWebVitals.js","index.js"],"names":["Home","distance","time","state","timer","useMemo","sTime","s","toString","padStart","m","Math","floor","style","styles","container","distanceWrap","label","toFixed","unit","display","flexDirection","flex","padding","title","fontSize","alignItems","justifyContent","marginTop","marginBottom","FlatList","data","keyExtractor","renderItem","map","item","index","key","Logs","clearLogs","onClick","window","confirm","listItem","th","number","paddingTop","paddingBottom","fontWeight","divAlign","Setting","alarmTime","setAlarmTime","type","input","value","onChange","e","newTime","target","margin","textAlign","serviceUUID","useBle","useState","isConnected","setIsConnected","setDistance","setTime","logs","setLogs","setState","useEffect","savedLogs","localStorage","getItem","oldLogs","JSON","parse","useCallback","removeItem","scanAndConnect","navigator","bluetooth","requestDevice","filters","name","optionalServices","then","device","console","log","addEventListener","event","gatt","connect","server","connected","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","TextDecoder","decode","split","distanceInch","prevLogs","newLogs","setItem","stringify","catch","error","App","tabKey","setTabKey","tabs","home","component","props","setting","Comp","status","scanningdiv","button","content","tab","borderRightWidth","borderRightColor","activeLabel","inactiveLabel","height","backgroundColor","position","letf","right","width","bottom","borderTop","color","scanningText","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6f75476.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\n\nconst Home = ({ distance = 0, time = 0, state = 0 }) => {\n\tconst timer = useMemo(() => {\n\t\tconst sTime = time / 1000\n\t\tconst s = (sTime % 60).toString().padStart(2, '0')\n\t\tconst m = Math.floor(sTime / 60).toString().padStart(2, '0')\n\t\treturn `${m}:${s}`\n\t}, [time])\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={styles.distanceWrap}>\n\t\t\t\t<div style={styles.label}>Distance</div>\n\t\t\t\t<div style={styles.distance}>{(distance || 0).toFixed(2)}</div>\n\t\t\t\t<div style={styles.unit}>Inches</div>\n\t\t\t\t{\n\t\t\t\t\tstate > 0 && (\n\t\t\t\t\t\t<div style={styles.timer}>Timer: {timer}s</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Home\n\nconst styles = {\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tdistanceWrap: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tlabel: {\n\t\tfontSize: 30,\n\t},\n\tdistance: {\n\t\tfontSize: 100\n\t},\n\tunit: {\n\t\tfontSize: 30,\n\t},\n\ttimer: {\n\t\tmarginTop: 30,\n\t\tfontSize: 35,\n\t\tmarginBottom: 30,\n\t}\n};\n","import React from 'react'\n\nconst FlatList = ({ data, keyExtractor, renderItem}) => {\n\treturn (\n\t\t<div>\n\t\t\t{data.map((item, index) => {\n\t\t\t\tconst key = keyExtractor(item, index)\n\t\t\t\treturn (\n\t\t\t\t\t<div key={key}>\n\t\t\t\t\t\t{renderItem({ item, index })}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nconst Logs = ({ data = [], clearLogs }) => {\n\tconst onClear = () => {\n\t\tconst answer = window.confirm('Are you sure to clear all logs')\n\t\tif (answer) {\n\t\t\tclearLogs()\n\t\t}\n\t}\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n\t\t\t\t<button onClick={onClear}>clear</button>\n\t\t\t</div>\n\t\t\t<div style={styles.listItem}>\n\t\t\t\t<div style={{...styles.th, ...styles.number}}>No.</div>\n\t\t\t\t<div style={{...styles.th, ...styles.distance}}>Distance (in.)</div>\n\t\t\t\t<div style={{...styles.th, ...styles.time}}>Time (mm:ss)</div>\n\t\t\t</div>\n\t\t\t<FlatList\n\t\t\t\tdata={data}\n\t\t\t\tkeyExtractor={(item, index) => index.toString()}\n\t\t\t\trenderItem={({ item, index }) => {\n\t\t\t\t\tconst s = (item.time % 60).toString().padStart(2, '0')\n\t\t\t\t\tconst m = Math.floor(item.time / 60).toString().padStart(2, '0')\n\t\t\t\t\tconst timer = `${m}:${s}`\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div style={styles.listItem}>\n\t\t\t\t\t\t\t<div style={styles.number}>#{index}</div>\n\t\t\t\t\t\t\t<div style={styles.distance}>{(item.distance || 0).toFixed(2)}</div>\n\t\t\t\t\t\t\t<div style={styles.time}>{timer}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Logs\n\nconst styles = {\n\tcontainer: {\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tlistItem: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tpaddingTop: 5,\n\t\tpaddingBottom: 5,\n\t},\n\tth: {\n\t\tfontWeight: 'bold'\n\t},\n\tnumber: {\n\t\tflex: 1,\n\t\tfontSize: 20,\n\t},\n\tdistance: {\n\t\tflex: 3,\n\t\tdivAlign: 'right',\n\t\tfontSize: 20,\n\t},\n\ttime: {\n\t\tflex: 3,\n\t\tdivAlign: 'right',\n\t\tfontSize: 20,\n\t},\n}\n","import React, { useMemo } from 'react'\n\nconst Setting = ({ alarmTime, setAlarmTime }) => {\n  const time = useMemo(() => {\n    return alarmTime / 1000\n  }, [alarmTime])\n\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={styles.distanceWrap}>\n        <div style={styles.label}>Set Alarm Time (sec)</div>\n        <input type=\"number\" style={styles.input} value={time} onChange={(e) => {\n          const newTime = +e.target.value * 1000\n          setAlarmTime(newTime)\n        }} />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Setting\n\nconst styles = {\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\tpadding: 15,\n\t},\n  title: {\n\t\tfontSize: 24\n  },\n\tdistanceWrap: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n  input: {\n    fontSize: 30,\n    padding: 10,\n    margin: 20,\n    textAlign: 'center',\n  },\n\tlabel: {\n\t\tfontSize: 30,\n\t},\n\tdistance: {\n\t\tfontSize: 100\n\t},\n\tunit: {\n\t\tfontSize: 30,\n\t},\n\ttimer: {\n\t\tmarginTop: 30,\n\t\tfontSize: 35,\n\t\tmarginBottom: 30,\n\t}\n};\n","import { useEffect, useState, useCallback } from 'react'\n\nconst serviceUUID = '52cf0b2c-28f2-4328-aaac-6badc36777d4'\nconst characteristicUUID = '051f540c-9a37-4284-9f98-2073e9f5bdfe'\nconst bleName = 'Arrow_ESP32'\n\n// const maxThreshold =  70 / 2.54 // 70 cm\n// const minThreshold =  50 / 2.54 // 50 cm\n\n// const cmToInch = (cm) => {\n//   return cm / 2.54\n// }\n\nconst useBle = () => {\n  // const interval = useRef(null)\n  // const [isScanning, setIsScanning] = useState(true)\n  const [isConnected, setIsConnected] = useState(false)\n  const [distance, setDistance] = useState(0)\n  // const [maxDistance, setMaxDistance] = useState(0)\n  const [time, setTime] = useState(0)\n  // const [isReset, setIsReset] = useState(false)\n  const [logs, setLogs] = useState([])\n  // const [isStarting, setIsStarting] = useState(false)\n  const [state, setState] = useState(0)\n  const [alarmTime, setAlarmTime] = useState(0)\n\n  useEffect(() => {\n    const savedLogs = localStorage.getItem('logs')\n    const oldLogs = savedLogs ? JSON.parse(savedLogs) : []\n    setLogs(oldLogs)\n  }, [])\n\n  // const setToggleTimer = useCallback(() => {\n  //   setIsStarting(starting => {\n  //     if (starting) {\n  //       setLogs((prevLogs) => {\n  //         const newLogs = [...prevLogs, {\n  //           distance: maxDistance,\n  //           time,\n  //         }]\n  //         localStorage.setItem('logs', JSON.stringify(newLogs))\n  //         return newLogs\n  //       })\n  //       setIsReset(false)\n  //       setMaxDistance(0)\n  //       setTime(0)\n  //     } else {\n  //       setIsReset(true)\n  //     }\n  //     return !starting\n  //   })\n  // }, [maxDistance, time])\n\n  const clearLogs = useCallback(() => {\n    setLogs([])\n    localStorage.removeItem('logs')\n  }, [])\n\n  // const reset = useCallback(() => {\n  //   setLogs((prevLogs) => {\n  //     const newLogs = [...prevLogs, {\n  //       distance: maxDistance,\n  //       time,\n  //     }]\n  //     localStorage.setItem('logs', JSON.stringify(newLogs))\n  //     return newLogs\n  //   })\n  //   setIsReset(false)\n  //   setIsReset(true)\n  //   setMaxDistance(0)\n  //   setTime(0)\n  // }, [time, maxDistance])\n\n  const scanAndConnect = useCallback(() => {\n    navigator.bluetooth.requestDevice({\n      filters: [{\n        name: bleName\n      }],\n      optionalServices: [serviceUUID]\n    })\n    .then(device => {\n      console.log({ device })\n      device.addEventListener('gattserverdisconnected', (event) => {\n        const device = event.target;\n        setIsConnected(false)\n        console.log(`Device ${device.name} is disconnected.`)\n      })\n      return device.gatt.connect();\n    })\n    .then((server) => {\n      console.log({ server })\n      setIsConnected(server.connected)\n      return server.getPrimaryService(serviceUUID)\n    })\n    .then((service) => {\n      console.log({ service })\n      return service.getCharacteristic(characteristicUUID)\n    })\n    .then((characteristic) => {\n      console.log({ characteristic })\n      return characteristic.startNotifications()\n    })\n    .then(characteristic => {\n      characteristic.addEventListener('characteristicvaluechanged', (event) => {\n        const value = event.target.value\n        const decoder = new TextDecoder('utf-8')\n        /*\n          state 0 = show distance only\n          state 1 = show distance & time\n          state 2 = show latest distance & time\n\n          time => ms\n          distance => inch\n        */\n        const [state, distance, time] = decoder.decode(value).split(',')\n        const distanceInch = +distance\n        setDistance(distanceInch)\n        setTime(time)\n        setState(state)\n        if (state === 2) {\n          setLogs((prevLogs) => {\n            const newLogs = [...prevLogs, {\n              distance: distanceInch,\n              time,\n            }]\n            localStorage.setItem('logs', JSON.stringify(newLogs))\n            return newLogs\n          })\n        }\n        // if (isReset === 'true') {\n        //   alert('reset')\n        //   reset()\n        // }\n      });\n      console.log('Notifications have been started.');\n    })\n    .catch(error => { console.error(error); });\n  }, [])\n\n  // useEffect(() => {\n  //   if (isReset) {\n  //     interval.current =  setInterval(() => {\n  //       setTime(time => time + 1)\n  //     }, 1000)\n  //   }\n  //   return () => clearInterval(interval.current)\n  // }, [isReset])\n\n  // useEffect(() => {\n  //   setMaxDistance((prevMax) => {\n  //     // if (distance >= minThreshold && distance <= maxThreshold) {\n  //       if (distance > prevMax) {\n  //         return distance\n  //       }\n  //     // }\n  //     return prevMax\n  //   })\n  // }, [distance])\n\n  // return { distance, time, logs, isConnected, scanAndConnect, reset, clearLogs, setToggleTimer, isStarting, state }\n  return { distance, time, logs, isConnected, scanAndConnect, clearLogs, state, alarmTime, setAlarmTime }\n}\n\nexport default useBle\n","import { useState, useMemo } from 'react';\nimport './App.css';\nimport Home from './components/Home'\nimport Logs from './components/Logs'\nimport Setting from './components/Setting'\nimport useBle from './hooks/useBle'\n\n// const isScanning = false\n// const distance = 100\n// const time = 90\n// const data = [\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n//   {\n//     distance: 100,\n//     time: 90,\n//   },\n// ]\n\nfunction App() {\n  // const { distance, time, logs: data, isConnected, scanAndConnect, clearLogs, isStarting, setToggleTimer } = useBle()\n  const { distance, time, logs: data, isConnected, scanAndConnect, clearLogs, state, alarmTime, setAlarmTime } = useBle()\n  const [tabKey, setTabKey] = useState('home') // home, logs, setting\n    const tabs = useMemo(() => ({\n      home: {\n        component: Home,\n        props: { distance, time, state },\n      },\n      logs: {\n        component: Logs,\n        props: { data, clearLogs }\n      },\n      setting: {\n        component: Setting,\n        props: { alarmTime, setAlarmTime }\n      }\n    }), [data, distance, time, clearLogs, state, alarmTime, setAlarmTime])\n    const Comp = tabs[tabKey].component\n    const props = tabs[tabKey].props\n\n    return (\n      <div style={styles.container}>\n        <div style={styles.status}>\n          <div style={styles.scanningdiv}>{isConnected ? 'Connected' : 'Disconnected'}</div>\n          {/* <button style={styles.button} onClick={reset}>Reset</button> */}\n          <button style={styles.button} onClick={scanAndConnect}>Scan and Connect</button>\n        </div>\n        <div style={styles.content}>\n          <Comp {...props} />\n        </div>\n        <div style={styles.tabs}>\n          <div style={{...styles.tab, ...{ borderRightWidth: 1, borderRightColor: '#d0d0d0' }}} onClick={() => setTabKey('home')}>\n            <div style={tabKey === 'home' ? styles.activeLabel : styles.inactiveLabel}>Home</div>\n          </div>\n          <div style={styles.tab} onClick={() => setTabKey('logs')}>\n            <div style={tabKey === 'logs' ? styles.activeLabel : styles.inactiveLabel}>Logs</div>\n          </div>\n          <div style={styles.tab} onClick={() => setTabKey('setting')}>\n            <div style={tabKey === 'setting' ? styles.activeLabel : styles.inactiveLabel}>Setting</div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    height: '100vh',\n  },\n  content: {\n    display: 'flex',\n    flex: 1,\n    paddingTop: 50,\n    backgroundColor: '#F5F5DC',\n    height: '100%',\n  },\n  tabs: {\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'absolute',\n    letf: 0,\n    right: 0,\n    width: '100%',\n    bottom: 0,\n    borderTop: '1px solid #d0d0d0',\n  },\n  tab: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#f1f1f1',\n  },\n  activeLabel: {\n    display: 'flex',\n    color: 'green',\n    fontWeight: 'bold'\n  },\n  inactiveLabel: {\n    display: 'flex',\n    color: '#444444',\n  },\n  scanningText: {\n    display: 'flex',\n    fontSize: 30\n  },\n  status: {\n    backgroundColor: 'black',\n    color: 'white',\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: 20,\n  },\n  button: {\n\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}